<!DOCTYPE html>
<title>Border Generation</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../site.css?update=2015-07-19">

<script src="https://cdn.rawgit.com/inexorabletash/polyfill/v0.1.18/polyfill.min.js"></script>
<script src="../map.js?update=2015-07-29"></script>
<script src="borders.js"></script>
<script>

var SECTOR_WIDTH = 32, SECTOR_HEIGHT = 40;

var ALLEGIANCE_COLORS = {
  'Im':   'red',
  'As':   'yellow',
  'Kk':   'green',
  'Va':   'olive',
  'ZhCo': 'blue',
  'SoCo': 'orange',
  'Hv':   'purple',
  'Fa':   'green',
  'DaCf': 'lightblue',
  'SwCf': 'blue',
  'Na':   'transparent',
};

function colorFor(alleg) {
  if (alleg.indexOf('V') === 0) return 'olivedrab';
  return ALLEGIANCE_COLORS[alleg];
}

// All later entries in each set are mapped to the first
var ALLEGIANCE_SETS = [

  // Non-Aligned (no borders)
  ['Na', // Non-aligned
   'Dr', // Droyne
   '--', // Unknown
   'Va', // Vargr
   'va', // "
   'Cs', // Client State
   'Cv', // Vargr client state
   'cv', // "
   'J-', // Julian Protectorate

   'NaAs', 'NaHu', 'NaVa', 'NaXX',
   'XXXX',
   'CsCa', 'CsHv', 'CsIm', 'CsMP', 'CsZh',
  ],

  // Classic Imperium
  ['Im',
   //'ImAp', // Amec Protectorate (Dagu)
   'ImDa', // Domain of Antares (Anta/Empt/Lish)
   'ImDc', // Domain of Sylea (Core/Delp/Forn/Mass)
   'ImDd', // Domain of Deneb (Dene/Reft/Spin/Troj)
   'ImDg', // Domain of Gateway (Glim/Hint/Ley)
   'ImDi', // Domain of Ilelish (Daib/Ilel/Reav/Verg/Zaru)
   'ImDs', // Domain of Sol (Alph/Dias/Magy/Olde/Solo)
   'ImDv', // Domain of Vland (Corr/Dagu/Gush/Reft/Vlan)
   //'ImLa', // League of Antares (Anta)
   //'ImLu', // Luriani Cultural Association (Ley/Forn)
   //'ImSy', // Sylean Worlds (Core)
   //'ImVd' Vegan Autonomous District (Solo)
  ],

  ['As', 'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9',
   'AsIf', 'AsMw', 'AsOf', 'AsSc', 'AsSF', 'AsT0', 'AsT1', 'AsT2',
   'AsT3', 'AsT4', 'AsT5', 'AsT6', 'AsT7', 'AsT8', 'AsT9', 'AsTA',
   'AsTv', 'AsTz', 'AsVc', 'AsWc', 'AsXX'
  ], // Aslan clans

  ['Uc', 'C1', 'C2', 'C3', 'C4'], // Union Crucis (Judges Guild)
  ['SoCf', 'SoNS', 'SoRD', 'SoWu', 'So'], // Solomani Confederation
  ['ZhCo', 'ZhCa', 'ZhIN', 'Zh'], // Zhodani Consulate

  // Comment out to get member state borders
  ['CA', 'CAEM', 'CAin', 'CAKT'], // Comsentient Alliance (Beyo/Vang)

  //Julian Protectorate
  ['JuPr', 'JuRu', 'JuHl']
];




//----------------------------------------------------------------------
//
// View
//
//----------------------------------------------------------------------

function makeMapDisplay(containerElement, map, inset) {
  var fragments = [], fragment;

  var sz = 15;
  var pad = 3;
  var top, left = -sz;

  for (x = map.origin_x + inset; x < map.origin_x + map.width - inset; ++x) {
    left += (sz + pad);
    top = (x % 2 ? 0 : (sz + pad) / 2) - sz;

    for (y = map.origin_y + inset; y < map.origin_y + map.height - inset; ++y) {
      top += (sz + pad);

      fragment = '<div class="hex" id="hex_' + x + '_' + y + '" style="left: ' + left + 'px; top: ' + top + 'px;">';
      fragment += hexContents(x, y, map);
      fragment += '<' + '/div>';

      fragments.push(fragment);

    }
  }

  containerElement.innerHTML = fragments.join("");
  containerElement.style.width = (map.width * sz + (map.width + 1) * pad) + "px";
  containerElement.style.height = ((map.height + 0.5) * sz + (map.height + 1.5) * pad) + "px";
}



function updateWalks(map) {
  var borders = [];
  var bounds = map.getBounds();
  var allegiance;
  var x, y, visited = {}, label, alleg, last_alleg, path;

  for (x = map.origin_x; x < map.origin_x + map.width; x += 1) {
    lastalleg = UNALIGNED;
    for (y = map.origin_y; y < map.origin_y + map.height; y += 1) {
      label = hexLabel(x, y);
      alleg = map.getAllegiance(x, y);
      if (alleg !== UNALIGNED && alleg !== NON_ALIGNED && alleg !== last_alleg && !(label in visited)) {

        path = walk(map, x, y, alleg);
        path = path.map(function(hex) { return hexLabel(hex[0], hex[1]); });
        path.forEach(function(label) { visited[label] = true; });

        borders.push({
          allegiance: alleg,
          path: path
        });
      }
      last_alleg = alleg;
    }
  }

  borders = borders.filter(function(border) {
    return border.path.some(function(hex) {
      var x = (Number(hex) / 100) | 0;
      var y = Number(hex) % 100;
      return (1 <= x && x <= 32) && (1 <= y && y <= 40);
    });
  });

  borders.sort(function(a, b) { return a.allegiance < b.allegiance ? -1 : a.allegiance > b.allegiance ? 1 : 0; });



  var html = [];
  borders.forEach(function(border) {
    if (border.path.length < 2)
      return;

    var str = '<Border Allegiance="' + Util.escapeHTML(border.allegiance) + '">' +
      border.path.join(' ') + '</Border>';
    html.push("<li>" + Util.escapeHTML(str));
  });

  document.getElementById("walks").innerHTML = html.join("");
}

function hexLabel(x, y) {
  return (x < 10 ? "0" : "") + x + (y < 10 ? "0" : "") + y;
}

function hexContents(x, y, map) {
  var hexNumber = hexLabel(x, y);
  var occupied = map.isOccupied(x, y);
  var alleg = map.getAllegiance(x, y);
  var color = (alleg == UNALIGNED) ? "transparent" : colorFor(alleg);
  if (color === (void 0)) { color = 'gray'; }

  return "<div class='hexContents' style='background-color: " + color + ";'>" +
           "<span class='hexNumber'>" + hexNumber + "<" + "/span>" +
         (occupied ? "<span class='world'>" + alleg + "</span>" : "") +
         "<" + "/div>";
}



//----------------------------------------------------------------------
//
// Initialization
//
//----------------------------------------------------------------------

function run(tasks, completion) {
  function do_next() {
    if (tasks.length) {
      var task = tasks.shift();
      task(do_next);
    } else {
      completion();
    }
  }
  nextTask();
}

function join(tasks, completion) {
  var completed = 0;
  function done_task() {
    completed += 1;
    if (completed === tasks.length) {
      completion();
    }
  }
  tasks.forEach(function(task) { task(done_task); });
}


function loadSector(sx, sy, callback) {
  var sectorName = undefined;
  Traveller.MapService.sectorDataTabDelimited(sectorName, {sx: sx, sy: sy})
           .then(function(data) {
             var worlds = [];
             var lines = data.split(/\r?\n/);
             var header = lines.shift().toLowerCase().split('\t');
             lines.forEach(function (line) {
               if (!line.length)
                 return;

               var world = {};
               line.split('\t').forEach(function (field, index) {
                 world[header[index]] = field;
               });

               world.x = parseInt(world.hex.substring(0, 2), 10);
               world.y = parseInt(world.hex.substring(2, 4), 10);
               worlds.push(world);
             });
             callback(worlds);
           })
           .catch(function(error) { callback([]); });
}

function sectorCoords(name, callback) {
  Traveller.MapService.coordinates(name)
           .then(callback)
           .catch(function() { callback(); });
}

window.onload = function() {

  function status(message) {
    var display = document.getElementById('status');
    display.innerHTML += '<div>' + Util.escapeHTML(message) + '<' + '/div>';
    display.scrollTop = display.scrollHeight
  }

  var searchParams = new URL(document.location).searchParams;
  if (!searchParams.has('sector')) {
    alert("Missing sector in URL");
    return;
  }

  sectorCoords(searchParams.get('sector'), function(coords) {
    if (!coords) {
      alert("No such sector");
      return;
    }


    var bigmap = new AllegianceMap(SECTOR_WIDTH * 3, SECTOR_HEIGHT * 3, 1, 1);


    var loadTasks = [];
    var ox, oy, hx, hy;

    for (ox = -1; ox <= 1; ox += 1) {
      for (oy = -1; oy <= 1; oy += 1) {

        loadTasks.push((function(ox, oy) {

          return function(completion) {

            loadSector(coords.sx + ox, coords.sy + oy, function(worlds) {
              status('Loaded sector at ' + (coords.sx + ox) + ',' + (coords.sy + oy));
              worlds.forEach(function(world) {

                ALLEGIANCE_SETS.forEach(function(alleg_set) {
                  if (alleg_set.indexOf(world.allegiance) !== -1) {
                    world.allegiance = alleg_set[0];
                  }
                });

                hx = world.x + ((ox + 1) * SECTOR_WIDTH);
                hy = world.y + ((oy + 1) * SECTOR_HEIGHT);

                bigmap.setOccupied(hx, hy, true);
                bigmap.setAllegiance(hx, hy, world.allegiance);
              });
              completion();
            });
          };
        } (ox, oy)));
      }
    }

    join(loadTasks, function() {

      processMap(
        bigmap,
        function complete() {
          var secmap = new AllegianceMap(SECTOR_WIDTH + 2, SECTOR_HEIGHT + 2, 0, 0);
          for (hx = 0; hx <= SECTOR_WIDTH + 1; hx += 1) {
            for (hy = 0; hy <= SECTOR_HEIGHT + 1; hy += 1) {
              secmap.setOccupied(hx, hy, bigmap.isOccupied(hx + SECTOR_WIDTH, hy + SECTOR_HEIGHT));
              secmap.setAllegiance(hx, hy, bigmap.getAllegiance(hx + SECTOR_WIDTH, hy + SECTOR_HEIGHT));
            }
          }

          makeMapDisplay(document.getElementById('map'), secmap, 1);
          //makeMapDisplay(document.getElementById('map'), bigmap, 0);
          updateWalks(secmap);
        },
      function progress(message) {
        var secmap = new AllegianceMap(SECTOR_WIDTH + 2, SECTOR_HEIGHT + 2, 0, 0);
        for (hx = 0; hx <= SECTOR_WIDTH + 1; hx += 1) {
          for (hy = 0; hy <= SECTOR_HEIGHT + 1; hy += 1) {
            secmap.setOccupied(hx, hy, bigmap.isOccupied(hx + SECTOR_WIDTH, hy + SECTOR_HEIGHT));
            secmap.setAllegiance(hx, hy, bigmap.getAllegiance(hx + SECTOR_WIDTH, hy + SECTOR_HEIGHT));
          }
        }

        makeMapDisplay(document.getElementById('map'), secmap, 1);
        status(message);
      });
    });
  });
};



    </script>
<style>
.hex
{
  position: absolute;
  width: 15px;
  height: 15px;
  overflow: hidden;
  cursor: pointer;
  border: solid 1px black;
  font-size: 6pt;
  font-family: Univers, Arial, sans-serif;
  text-align: center;
  line-height: 100%;
}
.hexNumber
{
  font-size: 3pt;
  font-family: Univers, Arial, sans-serif;
  color: gray;
  position: absolute;
  left: 0; top: 0;
  width: 100%;
  text-align: center;
}
.hexContents
{
    width: 100%; height: 100%; padding: 0; margin: 0; border: 0;
}
.world
{
  line-height: 15pt;
    font-size: 7pt;
}
#status
{
    float: right;
    width: 300px;
    padding: 10px;
    background-color: #f8f8f8;
    height: 600px;
    overflow-y: auto;
}

</style>

<div id="status"></div>
<div id="map" style="position: relative;">
</div>
<ul id="walks">
</ul>
